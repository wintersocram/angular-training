Angular 2
Angular JS
Node JS
Spring Boot
Hibernate
Aws


Angular crash course:

npm install -g @angular/cli
ng new hello-world check all commands here: https://angular.io/cli#command-overview

Visual studio:
	to install code:
		tap ctrl+shift+p
		tap: code
		install: install code command in path
		command line: code ., will open 
		change variable name for all: F2

Commands:
	code .		open project folder at visual studio, if code wass installed
	ng serve	serves the project

Folders:
e2e End-to-end	end-to-end tests
node_modules	folder to keep node folders
src	source		code of project
	app			the code
				Each internal folder has always modules and components files
	assets		images, icons, fonts? for the project
	environments	configs settings for the environments
	favicon.icon	icon on browser
	index.html		html to call the page.
					is it necessary in big projects or components?
					use app-root component
	main.ts			startpoint of application
					initial projects: it bootstrap the main module of application.
	polyfills.ts	import some scripts and dependencies to run angular
					angular do not use al js necessary?
					check link https://medium.com/@MertzAlertz/what-the-hell-is-zone-js-and-why-is-it-in-my-angular-2-6ff28bcf943e
	style.css		global styles for applications
	test.ts			set test enviroments
angular-cli.json	config file for angular cli
.editorconfig		settings for editor
.gitignore			exclude git files
angular.json		
karma.config.js		config file for karma : test runner for javascript code
package.json		standard file for node
					check: dependency @angular/http is not in v8, but in v2
package.lock.json
protractor.conf.js	config js - e2e tests
README.md
tsconfig.json		configs to typescript codes
tsconfig.app.json	
tslint.json			settings to tslint - static analyse tools for typescript
	
check md extention
check zone.js dependency
check protactor

on save:
	webpack - builder - combines the files (ts, styles) in bundles, minify for optimizations
		polyfils bundles : include gaps for browsers
		main bundles
		style bundles
		vendor bundles
		inline bundles
	webpack feature HMR (Hot Module Replacement) : auto reloading the page aftes changes

history
	Angular JS	2010
	Angular 2	2016
		typescript
		totally remodeled
	Angular3 ? Just to align the version of router
	Angular 4	2.4 version
	Changed to Angular
	Angular: v4

Typescripts
	strong typing
	object oriented feature
	class, interface, contructors, access modifies, fields, properties, generics, etc
	compile-time errors
	toolings (code editors, etc)

install 			:	npm i -g typescript
version				:	tsc --version
compile				:	tsc file.ts
						tsc *.ts --target ES5 (for error TS1056)
						ng serve
execute				:	node file.js
compile + execute	:	tsc *.ts && node file.ts

ES5		:	supported by all browsers
ES6		:	
ES2016	:	
ES2017	:	

Types
	boolean
	number
	string
	array
		let arr: number[] = [1, 2, 3];
		let list: Array<number> = [1, 2, 3];
	Tuple	array size know for different types
		let x: [string, number] = ['hello', 3];
	Enum
		enum Color {Red, Green=5, Blue}
		let c: Color = Color.Green;
		let colorName: string = Color[3];
	Any
	Void
	Null and Undefined
	Never
		The never type is a subtype of, and assignable to, every type; 
		however, no type is a subtype of, or assignable to, never (except 
		never itself). Even any isnâ€™t assignable to never.
		// Function returning never must have unreachable end point
		function error(message: string): never {
			throw new Error(message);
		}
	Object
	Type assertions
		(<string>foo)
		(foo as string)

arrow function = lambda expression in c#

custom types
	inline annotation :
		let foo(point: number) => {}					number is the inline annotation
		let foo(point: {x: number, y: number}) => {}	custom type using inline annotation
	using interface :		use Pascal naming convention
		interface Point {
			x: number;
			y: number;
		}
		let foo(point: Point) => {		custom type using interface
			let posX = point.x;
			...
		}
		foo({x=2, y=3});

Classes
	class Student {
		fullName: string;
		constructor(public firstName: string, 
					public lastName: string, 
					public middleName?: string, 
					private shortFullName?: string
		) {
			this.fullName = `${firstName} ${middleName? middleName + ' ':''}${lastName}`;
			// this.fullName = `${firstName} ${middleName} ${lastName}`;
			this.shortFullName = `${firstName} ${lastName}`;
		}

		printFullName(): void {
			console.log(`fullName: ${this.fullName}`)
		}

		printShortFullName() {
			console.log(`shortFullName: ${this.shortFullName}`)
		}
	}

	interface Person {
		firstName: string,
		lastName: string,
		middleName: string
	}

	function greeter(person: Student) {
		return `Hello, ${person.firstName} ${person.lastName}`;
	}

	function defineStudent(person: Person): Student {
		let _student = new Student(person.firstName, person.lastName, person.middleName);
		_student.printFullName();
		_student.printShortFullName();
		return _student;
	}

	let student1 = defineStudent({firstName: 'Jane', lastName: 'Name', middleName: null});
	let student2 = defineStudent({firstName: 'John', lastName: 'Smith', middleName: 'J.'});

	// Only for DOM
	// document.body.textContent = greeter(student1);
	// document.body.textContent = greeter(student2);

	// for Node:
	console.log( greeter(student1) );
	console.log( greeter(student2) );

/**
JS version:
	var Student = /** @class */ (function () {
		function Student(firstName, lastName, middleName, shortFullName) {
			this.firstName = firstName;
			this.lastName = lastName;
			this.middleName = middleName;
			this.shortFullName = shortFullName;
			this.fullName = firstName + " " + (middleName ? middleName + ' ' : '') + lastName;
			// this.fullName = `${firstName} ${middleName} ${lastName}`;
			this.shortFullName = firstName + " " + lastName;
		}
		Student.prototype.printFullName = function () {
			console.log("fullName: " + this.fullName);
		};
		Student.prototype.printShortFullName = function () {
			console.log("shortFullName: " + this.shortFullName);
		};
		return Student;
	}());
	function greeter(person) {
		return "Hello, " + person.firstName + " " + person.lastName;
	}
	function defineStudent(person) {
		var _student = new Student(person.firstName, person.lastName, person.middleName);
		_student.printFullName();
		_student.printShortFullName();
		return _student;
	}
	var student1 = defineStudent({ firstName: 'Jane', lastName: 'Name', middleName: null });
	var student2 = defineStudent({ firstName: 'John', lastName: 'Smith', middleName: 'J.' });
	// Only for DOM
	// document.body.textContent = greeter(user);
	// for Node:
	console.log(greeter(student1));
	console.log(greeter(student2));
*/

Access modifiers
	public (default)
	private
	when the var is created on the constructor arguments, it needs to use 
	public as well, even if it is the default

Property
	getX() {return this.x;}
	setX(value) {this.x = value;}
	...
	let x = point.getX();
	point.setX(10);
	OR
	get X() {return this.x;}
	set X(value) {this.x = value;}
	...
	let x = point.X;
	point.X = 10;

Angular
	component structure
	component:
		Decorator: Component from @angular/core
		encapsulate Data + HTML Template + Logic
	modules
		Decorator: NgModule from @angular/core
		container for groupe of related components
		All application has a main module, the app.module
		
Components:
	Base:
		1. create
		2. register,
		3. add an element in an HTML markup

	Create:
		we can extend html vocabulary (<foo>)
		insert a decorator to indicates to Angular that the class is an component:
			import { Component } from '@angular/core';
			
			@Component({
				selector: '.foo' // css selector
				template: '<h2>Foo</h2>'
			})
			export class FooComponent
	Register:
		in app.module.ts:
			import { FooComponent } from './foo.component';
			...
			@NgModule({
				declaration: [
					...
					FooComponent
			
	




